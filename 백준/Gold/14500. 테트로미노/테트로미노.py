n, m = map(int, input().split())  # 보드 크기
board = [list(map(int, input().split())) for _ in range(n)]  # 보드 값

# 모든 테트로미노의 가능한 모양들 (회전, 대칭 포함)
shapes = [
    # 1자 모양
    [(0, 0), (0, 1), (0, 2), (0, 3)],
    [(0, 0), (1, 0), (2, 0), (3, 0)],
    
    # 정사각형 모양
    [(0, 0), (0, 1), (1, 0), (1, 1)],

    # ㄴ자 모양
    [(0, 0), (1, 0), (2, 0), (2, 1)],
    [(0, 0), (0, 1), (0, 2), (1, 0)],
    [(0, 0), (0, 1), (1, 1), (2, 1)],
    [(0, 2), (1, 0), (1, 1), (1, 2)],
    [(0, 0), (0, 1), (1, 0), (2, 0)],
    [(0, 0), (0, 1), (0, 2), (1, 2)],
    [(0, 1), (1, 1), (2, 1), (2, 0)],
    [(0, 0), (1, 0), (1, 1), (1, 2)],
    
    # 번개 모양
    [(0, 1), (1, 0), (1, 1), (2, 0)],
    [(0, 0), (0, 1), (1, 1), (1, 2)],
    [(0, 0), (1, 0), (1, 1), (2, 1)],
    [(0, 1), (0, 2), (1, 0), (1, 1)],

    # ㅗ 모양
    [(0, 1), (1, 0), (1, 1), (1, 2)],
    [(0, 0), (1, 0), (1, 1), (2, 0)],
    [(0, 0), (0, 1), (0, 2), (1, 1)],
    [(0, 1), (1, 0), (1, 1), (2, 1)]
]

# 보드 안에 좌표가 있는지 확인하는 함수
def is_in_board(x, y):
    return 0 <= x < n and 0 <= y < m

# 주어진 좌표에 테트로미노 모양을 적용했을 때 점수를 계산하는 함수
def calculate_shape_value(x, y, shape):
    total = 0
    for dx, dy in shape:
        nx, ny = x + dx, y + dy
        if not is_in_board(nx, ny):  # 보드를 벗어나면 0을 반환
            return 0
        total += board[nx][ny]
    return total

max_value = 0  # 최대값을 저장할 변수

# 보드의 모든 좌표에 대해 각 테트로미노를 적용
for i in range(n):
    for j in range(m):
        for shape in shapes:
            max_value = max(max_value, calculate_shape_value(i, j, shape))  # 최대값 갱신

print(max_value)  # 최대 점수 출력